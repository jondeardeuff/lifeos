generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String               @id @default(uuid())
  email                      String               @unique
  phone                      String?              @unique
  fullName                   String               @map("full_name")
  avatarUrl                  String?              @map("avatar_url")
  timezone                   String               @default("UTC")
  settings                   Json                 @default("{}")
  createdAt                  DateTime             @default(now()) @map("created_at")
  updatedAt                  DateTime             @updatedAt @map("updated_at")
  deletedAt                  DateTime?            @map("deleted_at")
  password                   String?
  emailVerified              Boolean              @default(false) @map("email_verified")
  phoneVerified              Boolean              @default(false) @map("phone_verified")
  passwordResetToken         String?              @unique @map("password_reset_token")
  passwordResetExpiresAt     DateTime?            @map("password_reset_expires_at")
  emailVerificationToken     String?              @unique @map("email_verification_token")
  emailVerificationExpiresAt DateTime?            @map("email_verification_expires_at")
  aiConversations            AIConversation[]
  auditLogs                  AuditLog[]
  authSessions               AuthSession[]
  bankAccounts               BankAccount[]
  budgets                    Budget[]
  calendarSync               CalendarSyncStatus[]
  categories                 Category[]
  eventAttendees             EventAttendee[]
  events                     Event[]
  invoices                   Invoice[]
  organizationMember         OrganizationMember[]
  ownedOrganizations         Organization[]
  projects                   ProjectMember[]
  refreshTokens              RefreshToken[]
  taskAttachments            TaskAttachment[]
  taskComments               TaskComment[]
  assignedTasks              Task[]               @relation("TaskAssignee")
  tasks                      Task[]               @relation("TaskOwner")
  teamMembers                TeamMember[]
  transactionRules           TransactionRule[]
  transactions               Transaction[]
  userContext                UserContext[]
  preferences                UserPreferences?
  grantedRoles               UserRole[]           @relation("RoleGranter")
  roles                      UserRole[]
  voiceCommands              VoiceCommand[]

  @@map("users")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  role      String
  scopeType String?  @map("scope_type")
  scopeId   String?  @map("scope_id")
  grantedAt DateTime @default(now()) @map("granted_at")
  grantedBy String?  @map("granted_by")
  granter   User?    @relation("RoleGranter", fields: [grantedBy], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role, scopeType, scopeId])
  @@map("user_roles")
}

model UserPreferences {
  userId               String   @id @map("user_id")
  voiceEnabled         Boolean  @default(true) @map("voice_enabled")
  voiceLanguage        String   @default("en-US") @map("voice_language")
  notificationSettings Json     @default("{}") @map("notification_settings")
  calendarSettings     Json     @default("{}") @map("calendar_settings")
  financialSettings    Json     @default("{}") @map("financial_settings")
  updatedAt            DateTime @updatedAt @map("updated_at")
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Organization {
  id               String               @id @default(uuid())
  name             String
  ownerId          String               @map("owner_id")
  settings         Json                 @default("{}")
  subscriptionTier String               @default("free") @map("subscription_tier")
  createdAt        DateTime             @default(now()) @map("created_at")
  members          OrganizationMember[]
  owner            User                 @relation(fields: [ownerId], references: [id])
  projects         Project[]
  teams            Team[]

  @@map("organizations")
}

model OrganizationMember {
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  role           String       @default("member")
  joinedAt       DateTime     @default(now()) @map("joined_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([organizationId, userId])
  @@map("organization_members")
}

model Team {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  name           String
  description    String?
  createdAt      DateTime     @default(now()) @map("created_at")
  members        TeamMember[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model TeamMember {
  teamId String @map("team_id")
  userId String @map("user_id")
  role   String @default("member")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("team_members")
}

model Project {
  id               String            @id @default(uuid())
  organizationId   String?           @map("organization_id")
  name             String
  description      String?
  clientName       String?           @map("client_name")
  status           String            @default("active")
  startDate        DateTime?         @map("start_date")
  endDate          DateTime?         @map("end_date")
  budgetAmount     Decimal?          @map("budget_amount") @db.Decimal(12, 2)
  color            String?
  settings         Json              @default("{}")
  createdBy        String            @map("created_by")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  archivedAt       DateTime?         @map("archived_at")
  budgets          Budget[]
  events           Event[]
  invoices         Invoice[]
  members          ProjectMember[]
  organization     Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  tasks            Task[]
  transactionRules TransactionRule[]
  transactions     Transaction[]

  @@map("projects")
}

model ProjectMember {
  projectId  String   @map("project_id")
  userId     String   @map("user_id")
  role       String   @default("member")
  hourlyRate Decimal? @map("hourly_rate") @db.Decimal(10, 2)
  joinedAt   DateTime @default(now()) @map("joined_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([projectId, userId])
  @@map("project_members")
}

model Task {
  id               String           @id @default(uuid())
  title            String           @db.VarChar(500)
  description      String?
  userId           String           @map("user_id")
  projectId        String?          @map("project_id")
  parentTaskId     String?          @map("parent_task_id")
  assigneeId       String?          @map("assignee_id")
  status           String           @default("pending")
  priority         Int              @default(3)
  dueDate          DateTime?        @map("due_date")
  completedAt      DateTime?        @map("completed_at")
  recurringPattern Json?            @map("recurring_pattern")
  tags             String[]
  metadata         Json             @default("{}")
  source           String           @default("manual")
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  events           Event[]
  invoiceItems     InvoiceItem[]
  attachments      TaskAttachment[]
  comments         TaskComment[]
  dependents       TaskDependency[] @relation("DependentTasks")
  dependencies     TaskDependency[] @relation("TaskDependencies")
  assignee         User?            @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parentTask       Task?            @relation("SubTasks", fields: [parentTaskId], references: [id], onDelete: Cascade)
  subTasks         Task[]           @relation("SubTasks")
  project          Project?         @relation(fields: [projectId], references: [id])
  owner            User             @relation("TaskOwner", fields: [userId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@index([assigneeId])
  @@index([status])
  @@index([dueDate])
  @@index([createdAt(sort: Desc)])
  @@map("tasks")
}

model TaskDependency {
  taskId          String @map("task_id")
  dependsOnTaskId String @map("depends_on_task_id")
  dependencyType  String @default("finish_to_start") @map("dependency_type")
  dependsOn       Task   @relation("DependentTasks", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  task            Task   @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String   @map("task_id")
  userId    String   @map("user_id")
  comment   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

model TaskAttachment {
  id         String   @id @default(uuid())
  taskId     String   @map("task_id")
  uploadedBy String   @map("uploaded_by")
  fileName   String   @map("file_name")
  fileSize   Int      @map("file_size")
  fileType   String?  @map("file_type")
  storageUrl String   @map("storage_url")
  uploadedAt DateTime @default(now()) @map("uploaded_at")
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [uploadedBy], references: [id])

  @@map("task_attachments")
}

model Event {
  id               String          @id @default(uuid())
  userId           String          @map("user_id")
  externalId       String?         @map("external_id")
  externalProvider String?         @map("external_provider")
  title            String          @db.VarChar(500)
  description      String?
  location         String?
  startTime        DateTime        @map("start_time")
  endTime          DateTime        @map("end_time")
  allDay           Boolean         @default(false) @map("all_day")
  timezone         String?
  status           String          @default("confirmed")
  visibility       String          @default("private")
  recurringPattern Json?           @map("recurring_pattern")
  projectId        String?         @map("project_id")
  taskId           String?         @map("task_id")
  metadata         Json            @default("{}")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  attendees        EventAttendee[]
  project          Project?        @relation(fields: [projectId], references: [id])
  task             Task?           @relation(fields: [taskId], references: [id])
  user             User            @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([startTime])
  @@index([projectId])
  @@map("events")
}

model EventAttendee {
  id          String  @id @default(uuid())
  eventId     String  @map("event_id")
  userId      String? @map("user_id")
  email       String?
  name        String?
  status      String  @default("pending")
  isOrganizer Boolean @default(false) @map("is_organizer")
  event       Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@unique([eventId, email])
  @@map("event_attendees")
}

model CalendarSyncStatus {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  provider     String
  lastSyncAt   DateTime? @map("last_sync_at")
  syncToken    String?   @map("sync_token")
  isActive     Boolean   @default(true) @map("is_active")
  errorMessage String?   @map("error_message")
  user         User      @relation(fields: [userId], references: [id])

  @@unique([userId, provider])
  @@map("calendar_sync_status")
}

model BankAccount {
  id               String        @id @default(uuid())
  userId           String        @map("user_id")
  plaidAccountId   String?       @unique @map("plaid_account_id")
  institutionName  String?       @map("institution_name")
  accountName      String        @map("account_name")
  accountType      String?       @map("account_type")
  accountSubtype   String?       @map("account_subtype")
  lastFour         String?       @map("last_four")
  currentBalance   Decimal?      @map("current_balance") @db.Decimal(12, 2)
  availableBalance Decimal?      @map("available_balance") @db.Decimal(12, 2)
  currency         String        @default("USD")
  isActive         Boolean       @default(true) @map("is_active")
  lastSyncAt       DateTime?     @map("last_sync_at")
  createdAt        DateTime      @default(now()) @map("created_at")
  user             User          @relation(fields: [userId], references: [id])
  transactions     Transaction[]

  @@map("bank_accounts")
}

model Transaction {
  id              String       @id @default(uuid())
  userId          String       @map("user_id")
  accountId       String?      @map("account_id")
  externalId      String?      @map("external_id")
  amount          Decimal      @db.Decimal(12, 2)
  currency        String       @default("USD")
  transactionDate DateTime     @map("transaction_date") @db.Date
  description     String?
  merchantName    String?      @map("merchant_name")
  categoryId      String?      @map("category_id")
  projectId       String?      @map("project_id")
  isPending       Boolean      @default(false) @map("is_pending")
  isTransfer      Boolean      @default(false) @map("is_transfer")
  receiptUrl      String?      @map("receipt_url")
  notes           String?
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  account         BankAccount? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category        Category?    @relation(fields: [categoryId], references: [id])
  project         Project?     @relation(fields: [projectId], references: [id])
  user            User         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([accountId])
  @@index([transactionDate(sort: Desc)])
  @@index([projectId])
  @@map("transactions")
}

model Category {
  id               String            @id @default(uuid())
  userId           String?           @map("user_id")
  name             String            @db.VarChar(100)
  parentCategoryId String?           @map("parent_category_id")
  icon             String?
  color            String?
  isIncome         Boolean           @default(false) @map("is_income")
  isTaxDeductible  Boolean           @default(false) @map("is_tax_deductible")
  createdAt        DateTime          @default(now()) @map("created_at")
  budgets          Budget[]
  parentCategory   Category?         @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  subCategories    Category[]        @relation("CategoryHierarchy")
  user             User?             @relation(fields: [userId], references: [id])
  transactionRules TransactionRule[]
  transactions     Transaction[]

  @@map("categories")
}

model TransactionRule {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  ruleName   String?   @map("rule_name")
  conditions Json
  categoryId String?   @map("category_id")
  projectId  String?   @map("project_id")
  priority   Int       @default(1)
  isActive   Boolean   @default(true) @map("is_active")
  createdAt  DateTime  @default(now()) @map("created_at")
  category   Category? @relation(fields: [categoryId], references: [id])
  project    Project?  @relation(fields: [projectId], references: [id])
  user       User      @relation(fields: [userId], references: [id])

  @@map("transaction_rules")
}

model Budget {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  name           String
  categoryId     String?   @map("category_id")
  projectId      String?   @map("project_id")
  amount         Decimal   @db.Decimal(12, 2)
  period         String
  startDate      DateTime  @map("start_date") @db.Date
  endDate        DateTime? @map("end_date") @db.Date
  alertThreshold Decimal   @default(80.00) @map("alert_threshold") @db.Decimal(5, 2)
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  category       Category? @relation(fields: [categoryId], references: [id])
  project        Project?  @relation(fields: [projectId], references: [id])
  user           User      @relation(fields: [userId], references: [id])

  @@map("budgets")
}

model Invoice {
  id            String        @id @default(uuid())
  userId        String        @map("user_id")
  projectId     String?       @map("project_id")
  invoiceNumber String        @unique @map("invoice_number")
  clientName    String        @map("client_name")
  clientEmail   String?       @map("client_email")
  clientAddress String?       @map("client_address")
  issueDate     DateTime      @map("issue_date") @db.Date
  dueDate       DateTime      @map("due_date") @db.Date
  subtotal      Decimal       @db.Decimal(12, 2)
  taxAmount     Decimal       @default(0) @map("tax_amount") @db.Decimal(12, 2)
  totalAmount   Decimal       @map("total_amount") @db.Decimal(12, 2)
  status        String        @default("draft")
  paidAt        DateTime?     @map("paid_at")
  notes         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  items         InvoiceItem[]
  project       Project?      @relation(fields: [projectId], references: [id])
  user          User          @relation(fields: [userId], references: [id])

  @@map("invoices")
}

model InvoiceItem {
  id          String  @id @default(uuid())
  invoiceId   String  @map("invoice_id")
  description String
  quantity    Decimal @db.Decimal(10, 2)
  unitPrice   Decimal @map("unit_price") @db.Decimal(12, 2)
  amount      Decimal @db.Decimal(12, 2)
  taskId      String? @map("task_id")
  sortOrder   Int     @default(0) @map("sort_order")
  invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  task        Task?   @relation(fields: [taskId], references: [id])

  @@map("invoice_items")
}

model VoiceCommand {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  audioDuration   Int?     @map("audio_duration")
  transcription   String
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  parsedIntent    String?  @map("parsed_intent")
  parsedEntities  Json?    @map("parsed_entities")
  actionTaken     String?  @map("action_taken")
  actionResult    Json?    @map("action_result")
  errorMessage    String?  @map("error_message")
  createdAt       DateTime @default(now()) @map("created_at")
  user            User     @relation(fields: [userId], references: [id])

  @@map("voice_commands")
}

model UserContext {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  contextType     String   @map("context_type")
  key             String
  value           Json
  confidenceScore Decimal  @default(1.0) @map("confidence_score") @db.Decimal(3, 2)
  usageCount      Int      @default(1) @map("usage_count")
  lastUsedAt      DateTime @default(now()) @map("last_used_at")
  createdAt       DateTime @default(now()) @map("created_at")
  user            User     @relation(fields: [userId], references: [id])

  @@unique([userId, contextType, key])
  @@map("user_context")
}

model AIConversation {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  sessionId String   @map("session_id")
  role      String
  content   String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("ai_conversations")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  tableName String   @map("table_name")
  recordId  String   @map("record_id")
  action    String
  oldValues Json?    @map("old_values")
  newValues Json?    @map("new_values")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_log")
}

model AuthSession {
  id             String   @id @default(uuid())
  sessionId      String   @unique @map("session_id")
  userId         String   @map("user_id")
  userEmail      String   @map("user_email")
  accessToken    String   @map("access_token")
  refreshToken   String   @map("refresh_token")
  expiresAt      DateTime @map("expires_at")
  lastAccessedAt DateTime @default(now()) @map("last_accessed_at")
  createdAt      DateTime @default(now()) @map("created_at")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("auth_sessions")
}

model RefreshToken {
  id          String   @id @default(uuid())
  tokenFamily String   @unique @map("token_family")
  token       String   @unique
  userId      String   @map("user_id")
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}
